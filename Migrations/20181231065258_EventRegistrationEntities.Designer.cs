// <auto-generated />
using System;
using MakeItArtApi.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

namespace MakeItArtApi.Migrations
{
    [DbContext(typeof(ModelContext))]
    [Migration("20181231065258_EventRegistrationEntities")]
    partial class EventRegistrationEntities
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.SerialColumn)
                .HasAnnotation("ProductVersion", "2.2.0-rtm-35687")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            modelBuilder.Entity("MakeItArtApi.Models.Artwork", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("CreatedAt");

                    b.Property<string>("Description");

                    b.Property<string>("ImageExtension");

                    b.Property<Guid>("ImageId");

                    b.Property<bool>("IsSold");

                    b.Property<decimal>("Price");

                    b.Property<DateTime?>("SoldOn");

                    b.Property<string>("Title");

                    b.HasKey("Id");

                    b.ToTable("Artworks");
                });

            modelBuilder.Entity("MakeItArtApi.Models.Event", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("Capacity");

                    b.Property<string>("Description");

                    b.Property<DateTime>("End");

                    b.Property<string>("ImageExtension");

                    b.Property<Guid>("ImageId");

                    b.Property<string>("Name");

                    b.Property<DateTime>("Start");

                    b.HasKey("Id");

                    b.ToTable("Events");
                });

            modelBuilder.Entity("MakeItArtApi.Models.PrimaryContact", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("EmailAddress");

                    b.Property<string>("Name");

                    b.Property<string>("PhoneNumber");

                    b.HasKey("Id");

                    b.ToTable("PrimaryContacts");
                });

            modelBuilder.Entity("MakeItArtApi.Models.Registrant", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.ToTable("Registrants");
                });

            modelBuilder.Entity("MakeItArtApi.Models.Registration", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int?>("EventId");

                    b.Property<bool>("IsWaitList");

                    b.Property<Guid?>("PrimaryContactId");

                    b.Property<Guid?>("RegistrantId");

                    b.HasKey("Id");

                    b.HasIndex("EventId");

                    b.HasIndex("PrimaryContactId");

                    b.HasIndex("RegistrantId");

                    b.ToTable("Registrations");
                });

            modelBuilder.Entity("MakeItArtApi.Models.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<bool>("IsAdmin");

                    b.Property<byte[]>("PasswordHash");

                    b.Property<byte[]>("PasswordSalt");

                    b.Property<string>("Username");

                    b.HasKey("Id");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("MakeItArtApi.Models.Registration", b =>
                {
                    b.HasOne("MakeItArtApi.Models.Event", "Event")
                        .WithMany("Registrations")
                        .HasForeignKey("EventId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("MakeItArtApi.Models.PrimaryContact", "PrimaryContact")
                        .WithMany("Registrations")
                        .HasForeignKey("PrimaryContactId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("MakeItArtApi.Models.Registrant", "Registrant")
                        .WithMany("Registrations")
                        .HasForeignKey("RegistrantId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
